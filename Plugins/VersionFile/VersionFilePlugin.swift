//
//  VersionFilePlugin.swift
//  
//
//  Created by Mathew Gacy on 11/23/22.
//

import Foundation
import PackagePlugin

enum Constants {
    static let versionFile = "Version.swift"
}

@main
struct VersionFilePlugin: CommandPlugin {
    /// This entry point is called when operating on a Swift package.
    func performCommand(
        context: PluginContext,
        arguments: [String]
    ) async throws {
        if arguments.contains("--verbose") {
            print("Command plugin execution with arguments \(arguments.description) for Swift package \(context.package.displayName). All target information: \(context.package.targets.description)")
        }

        var argExtractor = ArgumentExtractor(arguments)
        let selectedTargets = argExtractor.extractOption(named: "target")
        guard let versionString = argExtractor.extractOption(named: "number").first else {
            throw "Command must be called with a version argument."
        }

        let fileContents = try makeVersion(Version(versionString: versionString))

        var targetsToProcess: [Target] = context.package.targets
        if selectedTargets.isEmpty == false {
            targetsToProcess = context.package.targets.filter { selectedTargets.contains($0.name) }.map { $0 }
        }

        for target in targetsToProcess {
            guard let target = target as? SourceModuleTarget, case .generic = target.kind else { continue }
            let versionPath = target.directory.appending(subpath: Constants.versionFile)
            try fileContents.write(toFile: versionPath.string, atomically: true, encoding: .utf8)
        }
    }

    func makeVersion(_ version: Version) -> String {
        """
        // This file was generated by the `VersionFile` package plugin.

        enum Version {
            static let number = "\(version)"
        }
        """
    }
}
